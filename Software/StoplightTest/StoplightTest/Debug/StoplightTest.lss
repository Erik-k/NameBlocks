
StoplightTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000252  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008f5  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000771  00000000  00000000  00000c05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000510  00000000  00000000  00001376  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00001888  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006a00  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008b  00000000  00000000  00008318  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000083a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000025a9  00000000  00000000  000083e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a3 30       	cpi	r26, 0x03	; 3
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	46 d0       	rcall	.+140    	; 0xde <main>
  52:	c3 c0       	rjmp	.+390    	; 0x1da <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <AllLightsOff>:

//////////////
// Functions
//////////////
void AllLightsOff(void){
	PORTA |= (0xFF<<PORTA);
  56:	32 b1       	in	r19, 0x02	; 2
  58:	22 b1       	in	r18, 0x02	; 2
  5a:	8f ef       	ldi	r24, 0xFF	; 255
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	02 c0       	rjmp	.+4      	; 0x64 <AllLightsOff+0xe>
  60:	88 0f       	add	r24, r24
  62:	99 1f       	adc	r25, r25
  64:	3a 95       	dec	r19
  66:	e2 f7       	brpl	.-8      	; 0x60 <AllLightsOff+0xa>
  68:	82 2b       	or	r24, r18
  6a:	82 b9       	out	0x02, r24	; 2
  6c:	08 95       	ret

0000006e <AllLightsOn>:
}

void AllLightsOn(void){
	PORTA &= (0x00<<PORTA);
  6e:	82 b1       	in	r24, 0x02	; 2
  70:	82 b1       	in	r24, 0x02	; 2
  72:	12 b8       	out	0x02, r1	; 2
  74:	08 95       	ret

00000076 <GreenLightOn>:
}

void GreenLightOn(void){
	PORTA &= (0xFE<<PORTA);
  76:	32 b1       	in	r19, 0x02	; 2
  78:	22 b1       	in	r18, 0x02	; 2
  7a:	8e ef       	ldi	r24, 0xFE	; 254
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <GreenLightOn+0xe>
  80:	88 0f       	add	r24, r24
  82:	99 1f       	adc	r25, r25
  84:	3a 95       	dec	r19
  86:	e2 f7       	brpl	.-8      	; 0x80 <GreenLightOn+0xa>
  88:	82 23       	and	r24, r18
  8a:	82 b9       	out	0x02, r24	; 2
  8c:	08 95       	ret

0000008e <YellowLightOn>:
}

void YellowLightOn(void){
	PORTA &= (0xFD<<PORTA);
  8e:	32 b1       	in	r19, 0x02	; 2
  90:	22 b1       	in	r18, 0x02	; 2
  92:	8d ef       	ldi	r24, 0xFD	; 253
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	02 c0       	rjmp	.+4      	; 0x9c <YellowLightOn+0xe>
  98:	88 0f       	add	r24, r24
  9a:	99 1f       	adc	r25, r25
  9c:	3a 95       	dec	r19
  9e:	e2 f7       	brpl	.-8      	; 0x98 <YellowLightOn+0xa>
  a0:	82 23       	and	r24, r18
  a2:	82 b9       	out	0x02, r24	; 2
  a4:	08 95       	ret

000000a6 <RedLightOn>:
}

void RedLightOn(void){
	PORTA &= (0xFB<<PORTA);
  a6:	32 b1       	in	r19, 0x02	; 2
  a8:	22 b1       	in	r18, 0x02	; 2
  aa:	8b ef       	ldi	r24, 0xFB	; 251
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <RedLightOn+0xe>
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	3a 95       	dec	r19
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <RedLightOn+0xa>
  b8:	82 23       	and	r24, r18
  ba:	82 b9       	out	0x02, r24	; 2
  bc:	08 95       	ret

000000be <CheckPortC>:
}

void CheckPortC(void){
	// Check values of C0, C1, C2
	C0 = (PINC & (1<<PINC0)) ? 1 : 0;
  be:	88 b1       	in	r24, 0x08	; 8
  c0:	81 70       	andi	r24, 0x01	; 1
  c2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <C0>
	C1 = (PINC & (1<<PINC1)) ? 1 : 0;
  c6:	88 b1       	in	r24, 0x08	; 8
  c8:	86 95       	lsr	r24
  ca:	81 70       	andi	r24, 0x01	; 1
  cc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <C1>
	C2 = (PINC & (1<<PINC2)) ? 1 : 0;
  d0:	88 b1       	in	r24, 0x08	; 8
  d2:	82 fb       	bst	r24, 2
  d4:	88 27       	eor	r24, r24
  d6:	80 f9       	bld	r24, 0
  d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  dc:	08 95       	ret

000000de <main>:
}

int main(void)
{
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
	DDRA |= (0xFF<<DDRA);	// A pins are outputs to toggle the LED
  e2:	21 b1       	in	r18, 0x01	; 1
  e4:	41 b1       	in	r20, 0x01	; 1
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	bc 01       	movw	r22, r24
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <main+0x14>
  ee:	66 0f       	add	r22, r22
  f0:	77 1f       	adc	r23, r23
  f2:	2a 95       	dec	r18
  f4:	e2 f7       	brpl	.-8      	; 0xee <main+0x10>
  f6:	9b 01       	movw	r18, r22
  f8:	24 2b       	or	r18, r20
  fa:	21 b9       	out	0x01, r18	; 1
	DDRB |= (0xFF<<DDRB);	// B pins are outputs to talk to other uC's
  fc:	25 b1       	in	r18, 0x05	; 5
  fe:	45 b1       	in	r20, 0x05	; 5
 100:	bc 01       	movw	r22, r24
 102:	02 c0       	rjmp	.+4      	; 0x108 <main+0x2a>
 104:	66 0f       	add	r22, r22
 106:	77 1f       	adc	r23, r23
 108:	2a 95       	dec	r18
 10a:	e2 f7       	brpl	.-8      	; 0x104 <main+0x26>
 10c:	9b 01       	movw	r18, r22
 10e:	24 2b       	or	r18, r20
 110:	25 b9       	out	0x05, r18	; 5
	DDRC &= (0x00<<DDRC);	// C pins are inputs to listen to other uC's
 112:	29 b1       	in	r18, 0x09	; 9
 114:	29 b1       	in	r18, 0x09	; 9
 116:	19 b8       	out	0x09, r1	; 9

	PUEA &= (0x00<<PUEA);
 118:	23 b1       	in	r18, 0x03	; 3
 11a:	23 b1       	in	r18, 0x03	; 3
 11c:	13 b8       	out	0x03, r1	; 3
	PUEB &= (0x00<<PUEB);
 11e:	27 b1       	in	r18, 0x07	; 7
 120:	27 b1       	in	r18, 0x07	; 7
 122:	17 b8       	out	0x07, r1	; 7
	PUEC |= (0xFF<<PUEC);	// Port C is pulled up
 124:	3b b1       	in	r19, 0x0b	; 11
 126:	2b b1       	in	r18, 0x0b	; 11
 128:	02 c0       	rjmp	.+4      	; 0x12e <main+0x50>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	3a 95       	dec	r19
 130:	e2 f7       	brpl	.-8      	; 0x12a <main+0x4c>
 132:	82 2b       	or	r24, r18
 134:	8b b9       	out	0x0b, r24	; 11
	
	
	PORTB &= (0x00<<PORTB);	// B0, B1, B2 low
 136:	86 b1       	in	r24, 0x06	; 6
 138:	86 b1       	in	r24, 0x06	; 6
 13a:	16 b8       	out	0x06, r1	; 6
			AllLightsOff();
			PORTB |= (0x03<<PORTB);	// B0 High, B1 High, B2 Low = 0b00000011
			GreenLightOn();
			break;
		}
		else if (C0 & C1 & !C2){
 13c:	c1 e0       	ldi	r28, 0x01	; 1
 13e:	d0 e0       	ldi	r29, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	87 ea       	ldi	r24, 0xA7	; 167
 142:	91 e6       	ldi	r25, 0x61	; 97
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <main+0x66>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x6c>
 14a:	00 00       	nop
	PORTB &= (0x00<<PORTB);	// B0, B1, B2 low
	
	char iterations_left = 2;
	while (iterations_left >= 0){
		_delay_ms(100);			// Let everything settle before checking port C
		CheckPortC();
 14c:	b8 df       	rcall	.-144    	; 0xbe <CheckPortC>
		if (C0 & C1 & C2){
 14e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <C0>
 152:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <C1>
 156:	42 2f       	mov	r20, r18
 158:	43 23       	and	r20, r19
 15a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 15e:	94 2f       	mov	r25, r20
 160:	98 23       	and	r25, r24
 162:	71 f0       	breq	.+28     	; 0x180 <main+0xa2>
			AllLightsOff();
 164:	78 df       	rcall	.-272    	; 0x56 <AllLightsOff>
			PORTB |= (0x03<<PORTB);	// B0 High, B1 High, B2 Low = 0b00000011
 166:	36 b1       	in	r19, 0x06	; 6
 168:	26 b1       	in	r18, 0x06	; 6
 16a:	83 e0       	ldi	r24, 0x03	; 3
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <main+0x96>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	3a 95       	dec	r19
 176:	e2 f7       	brpl	.-8      	; 0x170 <main+0x92>
 178:	82 2b       	or	r24, r18
 17a:	86 b9       	out	0x06, r24	; 6
			GreenLightOn();
 17c:	7c df       	rcall	.-264    	; 0x76 <GreenLightOn>
			break;
 17e:	28 c0       	rjmp	.+80     	; 0x1d0 <main+0xf2>
		}
		else if (C0 & C1 & !C2){
 180:	9c 2f       	mov	r25, r28
 182:	81 11       	cpse	r24, r1
 184:	9d 2f       	mov	r25, r29
 186:	50 e0       	ldi	r21, 0x00	; 0
 188:	69 2f       	mov	r22, r25
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	46 23       	and	r20, r22
 18e:	57 23       	and	r21, r23
 190:	45 2b       	or	r20, r21
 192:	71 f0       	breq	.+28     	; 0x1b0 <main+0xd2>
			AllLightsOff();
 194:	60 df       	rcall	.-320    	; 0x56 <AllLightsOff>
			PORTB |= (0x01<<PORTB); // B0 High, B1 Low, B2 Low = 0b00000001
 196:	36 b1       	in	r19, 0x06	; 6
 198:	26 b1       	in	r18, 0x06	; 6
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <main+0xc6>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	3a 95       	dec	r19
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <main+0xc2>
 1a8:	82 2b       	or	r24, r18
 1aa:	86 b9       	out	0x06, r24	; 6
			YellowLightOn();
 1ac:	70 df       	rcall	.-288    	; 0x8e <YellowLightOn>
			break;
 1ae:	10 c0       	rjmp	.+32     	; 0x1d0 <main+0xf2>
		}
		else if (C0 & !C1 & !C2){
 1b0:	8c 2f       	mov	r24, r28
 1b2:	31 11       	cpse	r19, r1
 1b4:	8d 2f       	mov	r24, r29
 1b6:	98 23       	and	r25, r24
 1b8:	89 2f       	mov	r24, r25
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	82 23       	and	r24, r18
 1c0:	93 23       	and	r25, r19
 1c2:	89 2b       	or	r24, r25
 1c4:	19 f0       	breq	.+6      	; 0x1cc <main+0xee>
			AllLightsOff();	// PORTB stays all low
 1c6:	47 df       	rcall	.-370    	; 0x56 <AllLightsOff>
			RedLightOn();
 1c8:	6e df       	rcall	.-292    	; 0xa6 <RedLightOn>
			break;
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <main+0xf2>
		}
		else{
			// ERROR CONDITION this state should never happen
			AllLightsOn();
 1cc:	50 df       	rcall	.-352    	; 0x6e <AllLightsOn>
		}
		iterations_left--;
	}
 1ce:	b8 cf       	rjmp	.-144    	; 0x140 <main+0x62>
}
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
